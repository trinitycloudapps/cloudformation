AWSTemplateFormatVersion: 2010-09-09

Parameters:

  AmiId:
    Type: AWS::EC2::Image::Id

  ApplicationName:
    Type: String

  AssociatePublicIpAddress:
    AllowedValues:
      - true
      - false
    Default: false
    Type: String

  AutoScalingDesiredCapacity:
    Default: 1
    Type: String

  AutoScalingMaxInstanceLifetime:
    Default: none
    Type: String

  AutoScalingMaximum:
    Default: 1
    Type: String

  AutoScalingMinimum:
    Default: 1
    Type: String

  AutoScalingTerminationPolicies:
    Default: OldestLaunchTemplate,OldestInstance
    Type: CommaDelimitedList

  CodeDeployApplication:
    Default: none
    Type: String

  HealthCheckPath:
    Default: /api/health-check
    Type: String

  Host:
    Default: none
    Type: String

  InstanceType:
    Default: t3.micro
    Type: String

  KeyName:
    Default: none
    Type: String

  LoadBalancerListenerArn:
    Default: none
    Type: String

  Port:
    Default: 80
    Type: String

  Protocol:
    Default: HTTP
    Type: String

  SubnetIdList:
    Type: List<AWS::EC2::Subnet::Id>

  Sequence:
    Default: 1
    Type: String

  Stage:
    Type: String

  UserData:
    Default: ''
    Type: String

  VpcCidr:
    Type: String

  VpcId:
    Type: AWS::EC2::VPC::Id

Conditions:

  CreateCodeDeployGroup: !Not [ !Equals [ !Ref CodeDeployApplication, none ] ]
  CreateLoadBalancerListenerRule: !Not [ !Equals [ !Ref LoadBalancerListenerArn, none ] ]
  HasAutoScalingMaxInstanceLifetime: !Not [ !Equals [ !Ref AutoScalingMaxInstanceLifetime, none ] ]
  HasKeyName: !Not [ !Equals [ !Ref KeyName, none ] ]
  HasPublicIpAddress: !Equals [ !Ref AssociatePublicIpAddress, true ]

Resources:

  #1) Security Groups: Ssh and Web
  SshSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${ApplicationName}-${Stage}-${Sequence}-ssh-security-group
      GroupName: !Sub ${ApplicationName}-${Stage}-${Sequence}-ssh-security-group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !If [ HasPublicIpAddress, '0.0.0.0/0', !Ref VpcCidr ]
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-${Stage}-${Sequence}-ssh-security-group
      VpcId: !Ref VpcId

  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${ApplicationName}-${Stage}-${Sequence}-web-security-group
      GroupName: !Sub ${ApplicationName}-${Stage}-${Sequence}-web-security-group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref Port
          ToPort: !Ref Port
          CidrIp: !If [ HasPublicIpAddress, '0.0.0.0/0', !Ref VpcCidr ]
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-${Stage}-${Sequence}-web-security-group
      VpcId: !Ref VpcId

  #2) Load Balancer Rule and TargetGroup
  LoadBalancerListenerRule:
    Condition: CreateLoadBalancerListenerRule
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Ref Host
      ListenerArn: !Ref LoadBalancerListenerArn
      Priority: 1

  TargetGroup:
    Condition: CreateLoadBalancerListenerRule
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckPort: !Ref Port
      HealthCheckProtocol: !Ref Protocol
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Name: !Sub ${ApplicationName}-${Stage}-${Sequence}-tg
      Port: !Ref Port
      Protocol: !Ref Protocol
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId

  #3) Instance Profile/Iam Role
  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref IamRole

  IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${ApplicationName}-${AWS::Region}-${Stage}-${Sequence}-ec2-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:AssociateAddress
                  - ec2:DescribeTags
                  - ec2messages:GetMessages
                Resource:
                  - '*'
        - PolicyName: !Sub ${ApplicationName}-${AWS::Region}-${Stage}-${Sequence}-cloudwatch-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource:
                  - '*'
        - PolicyName: !Sub ${ApplicationName}-${AWS::Region}-${Stage}-${Sequence}-s3-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                  #Explicitly setting this so it's not forgotten when permissions are restricted
                  - s3:GetEncryptionConfiguration
                Resource:
                  - '*'
        - PolicyName: !Sub ${ApplicationName}-${AWS::Region}-${Stage}-${Sequence}-systemsmanager-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:*'
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDatachannel
                Resource:
                  - '*'
      RoleName: !Sub ${ApplicationName}-${AWS::Region}-${Stage}-${Sequence}-ec2-iam-role

  #4) Launch Template
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt IamInstanceProfile.Arn
        ImageId: !Ref AmiId
        InstanceType: !Ref InstanceType
        KeyName: !If [ HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue' ]
        NetworkInterfaces:
          - AssociatePublicIpAddress: !Ref AssociatePublicIpAddress
            DeviceIndex: 0
            Groups:
              - !Ref SshSecurityGroup
              - !Ref WebSecurityGroup
        UserData:
          'Fn::Base64': !Sub |
            #!/bin/bash
            ${UserData}
      LaunchTemplateName: !Sub ${ApplicationName}-${Stage}-${Sequence}-launch-template

  #5) Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${ApplicationName}-${Stage}-${Sequence}-auto-scaling-group
      DesiredCapacity: !Ref AutoScalingDesiredCapacity
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxInstanceLifetime: !If [ HasAutoScalingMaxInstanceLifetime, !Ref AutoScalingMaxInstanceLifetime, !Ref 'AWS::NoValue' ]
      MaxSize: !Ref AutoScalingMaximum
      MinSize: !Ref AutoScalingMinimum
      Tags:
        - Key: ApplicationName
          Value: !Ref ApplicationName
          PropagateAtLaunch: true
        - Key: Name
          Value: !Sub ${ApplicationName}-${Stage}-${Sequence}
          PropagateAtLaunch: true
        - Key: Stage
          Value: !Ref Stage
          PropagateAtLaunch: true
      TargetGroupARNs:
        !If
        - CreateLoadBalancerListenerRule
        -
          - !Ref TargetGroup
        -
          - !Ref 'AWS::NoValue'
      TerminationPolicies: !Ref AutoScalingTerminationPolicies
      VPCZoneIdentifier: !Ref SubnetIdList

  #7) CodeDeploy Group
  #@todo: Rollbacks
  CodeDeployGroup:
    Condition: CreateCodeDeployGroup
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      AutoScalingGroups:
        - !Ref AutoScalingGroup
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      DeploymentGroupName: !Sub ${ApplicationName}-${Stage}-${Sequence}
      DeploymentStyle:
        DeploymentOption: !If [ CreateLoadBalancerListenerRule, WITH_TRAFFIC_CONTROL, WITHOUT_TRAFFIC_CONTROL ]
        DeploymentType: IN_PLACE
      LoadBalancerInfo:
        !If
        - CreateLoadBalancerListenerRule
        - TargetGroupInfoList:
            - Name: !GetAtt TargetGroup.TargetGroupName
        - !Ref 'AWS::NoValue'
      ServiceRoleArn: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/CodeDeployServiceRole'

Outputs:

  AutoScalingGroup:
    Value: !Ref AutoScalingGroup

  Cidr:
    Value: !If [ HasPublicIpAddress, '0.0.0.0/0', !Ref VpcCidr ]

  HasPublicIpAddress:
    Value: !Ref AssociatePublicIpAddress

  IamRoleName:
    Value: !Ref IamRole

  InstanceProfile:
    Value: !Ref IamInstanceProfile

  InstanceType:
    Value: !Ref InstanceType
